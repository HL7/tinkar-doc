<?xml version="1.0" encoding="UTF-8"?> <?xml-model href="../../../docbook-customization/src/docbkx-stylesheet/common/komet.rnc" type="application/relax-ng-compact-syntax"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1">
  <title>Tinkar Overview</title>
  <para>Over the past decades, biomedical terminologies have increasingly been recognized as key
    resources for knowledge management, data integration, and decision support (<link
      xlink:href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6115234/">1</link> – REF).
    Acceleration and development of Electronic Health Record (EHR) systems has precipitated the
    emergence of “standard terminologies” and their widespread adoption in the clinical community.
    These include Systematized Nomenclature of Medicine Clinical Terms (SNOMED CT), the Logical
    Observation Identifiers, Names, and Codes (LOINC®) and RxNorm. The availability of these
    clinical terminologies through the unified terminology services of FHIR is facilitating their
    usage in support of interoperability in healthcare. </para>
  <para>Interoperability requires standardized semantics based on reference terminology provided by
    standards development organizations, professional organizations, or government agencies. These
    organizations publish their content with the intention of licensing it to health IT vendors,
    providers, and research organizations. In the U.S., the core clinical reference terminology is
    based on SNOMED CT, LOINC, and RxNorm. Healthcare organizations have to adopt and integrate
    subsets or modules of various reference terminology and manage references, dependencies,
    versions, and releases. It is important for the integrity of medical records that the change
    history of concepts and value sets can be managed and tracked to allow the exchange of either
    current or retrospective health records. Therefore, enterprise terminology requires integrated
    terminology using a common representation and management.</para>
  <para>Despite the need to use standard terminologies in a highly integrated way, there is no
    standard representation across SNOMED CT, LOINC, RxNorm, etc. Some partnerships have been
    created among development teams to facilitate interoperability and minimize duplication of
    effort. Further integration has been proposed but will require additional resources to bring
    these terminologies closer together. However, while this evolution leads to greater
    compatibility and interoperability, integration of SNOMED CT, LOINC, and RxNorm in non-trivial
    as these terminologies have different semantics models, and use different formalisms and tools
    for their representation, have separate release cycles, and different versioning mechanisms.
    There is little recognition that terminology standards are not standardized at the exchange
    level. Even HL7 has three dissimilar ways to represent concepts, value sets, and code systems. </para>
  <para>In this document, we focus on the need for – and logical specification of – a Terminology
    Knowledge Architecture (Tinkar). Tinkar is intended to provide an architecture that delivers
    integrated terminology to the enterprise and its information systems, that addresses the
    differences in management and structure across reference terminology and with local concepts and
    code lists/value sets. The Tinkar Reference Model, is a logical model that describes the
    standardized model for terminology and change management. </para>
  <para>A Tinkar Specification could provide a single representation for all terminologies required
    in the U.S. that meet the following criteria for managing change from the capability maturity
    model (REF needed): </para>
  <para><emphasis role="bold">Initial</emphasis> – Tinkar aims to reduce and eliminate challenges
    with management of changes to terminology being unpredictable, poorly controlled, and
    reactive</para>
  <para><emphasis role="bold">Repeatable</emphasis> – Tinkar provides the foundation for robust
    configuration management and quality assurance for terminologies</para>
  <para><emphasis role="bold">Defined</emphasis> – Tinkar allows terminologies to have standardized
    update and extension processes</para>
  <para><emphasis role="bold">Managed</emphasis> – Tinkar represenents updates and changes to
    terminologies so that the changes can be measured and controlled</para>
  <para><emphasis role="bold">Optimizing</emphasis> – Tinkar aims to allow multiple stakeholders to
    apply and retrieve changes to shared terminology content with equivalent and harmonized
    results</para>
  <para>Tinkar aims to adhere to the following statement from a publication about developments in
    clinical terminologies in the 2018 Yearbook of Medical Informatics (<link
      xlink:href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6115234/">2</link> --REF): “The
    benefits of the integrated terminologies in terms of homogenous semantics and inherent
    interoperability should, however, outweigh the complexity added to the system.” This
    specification provides the foundation of a knowledge architecture that is intended to integrate
    reference terminology from distributors (e.g. SNOMED CT, LOINC, RxNorm) with local concepts in
    order to support interoperable information semantics across the enterprise. </para>
  <section>
    <title>Motivation: Why Tinkar?</title>
    <para>Information systems that are used across the healthcare enterprise record and manage
      clinical data using clinical statements and clinical terminologies in non standardized ways.
      Interoperability specifications aim to require terminology bindings to concepts, code systems,
      and reusable value sets. Currently, we see variation in clinical data exchange across the
      enterprise, as current payloads and clinical statements use inconsistent and highly variable
      enterprise terminologies. The management of the concepts, code systems, and value sets is
      non-trivial, as developers, implementers, and end users are forced to manage “unnecessary
      complexity”. For example:</para>
    <itemizedlist>
      <listitem>
        <para>Representation of medications: RxNorm codes overlap with CVX codes. Investigational
          vaccines from FDA are not represented in either RxNorm or CVX or SNOMED</para>
      </listitem>
      <listitem>
        <para>Representation of COVID-19 result codes (e.g., detected, undetected, positive,
          negative, etc.)</para>
      </listitem>
    </itemizedlist>
    <para>As a result of these complexities, there are many ways to say the same thing using
      standard terminologies and standard formats. The Institute of Medicine report <emphasis
        role="italic">Health IT and Patient Safety: Building Safer Systems for Better
        Care</emphasis> highlighted the unintended consequences of health IT-induced harm that can
      result in serious injury and death due to dosing errors, failing to detect serious illnesses,
      and delaying treatment due to poor human-computer interactions, confusing clinical
      terminology, or unreliable data quality ([Institute of Medicine (2012). <emphasis
        role="italic">Health IT and Patient Safety. Building Safer Systems for Better
        Care</emphasis>. Washington, DC: National Academies Press] --REF ). Despite the widespread
      understanding of the importance of the quality of clinical data, there is currently a lack of
      integration and management of clinical terminologies across the healthcare enterprise. </para>
    <para>Tinkar intends to integrate clinical terminology and local concepts in order to support
      increased data quality for interoperable clinical information. Quality clinical data enables
      healthcare systems across the enterprise to conduct robust and meaningful data analysis and
      increase overall interoperability, which ultimately enhances quality of care across all
      medical facilities. <inlinemediaobject>
        <imageobjectco>
          <imageobject>
            <imagedata fileref="Tinkar_1,1.png" scale="40" align="center"/>
          </imageobject>
        </imageobjectco>
      </inlinemediaobject></para>
  </section>
  <section>
    <title>The Problem Tinkar Addresses </title>
    <para>The following 3 high level potential deficiencies related to poorly integrated terminology
      and inefficient change management describe preventable harm that Tinkar aims to
      address:</para>
    <para>
      <orderedlist>
        <listitem>
          <para><emphasis role="bold">Inability to recognize equivalence.</emphasis>
          </para>
          <para>
            <itemizedlist>
              <listitem>
                <para>Difficulty with determining that codes/terms using standard terminologies from
                  disparate health IT systems represent a common clinical idea/concept (e.g.,
                  “COVID-19 negative test result”.</para>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Inability to represent a pertinent
            phenomenon</emphasis></para>
          <para>
            <itemizedlist>
              <listitem>
                <para>A new set of local terminology may be managed with value sets and concept gaps
                  addressed in quick iterations (e.g., COVID-19 laboratory test results).</para>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Flawed information</emphasis></para>
          <para>
            <itemizedlist>
              <listitem>
                <para>Incorrect usage or representation of clinical ideas/concepts from standard
                  terminologies due to a lack of harmonization and multiple representations that
                  currently exist (e.g., an incorrectly coded COVID-19 test result)</para>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
      </orderedlist>
    </para>
    <para><emphasis role="bold">Consider the following examples of things that have gone wrong:
      </emphasis></para>
    <para>(https://www.systmoneusergroup.co.uk/qrisk2-update/;
      https://www.bmj.com/content/353/bmj.i2742;
      https://www.gov.uk/government/news/mhra-information-on-tpp-and-qrisk2;</para>
    <para>https://www.healthcareitnews.com/news/clinical-decision-support-malfunctions-are-widespread-andpersistent-amia-says)
      – REF</para>
    <itemizedlist>
      <listitem>
        <emphasis role="bold">Computer error may have led to incorrect prescribing of statins to
          thousands of patients</emphasis>
        <itemizedlist>
          <listitem>
            <para>Thousands of patients in England may have been incorrectly prescribed or taken off
              statins because of a major IT glitch.</para>
          </listitem>
          <listitem>
            <para>Underlying cause: code mapping errors, brittle means for determining
              equivalence</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <emphasis role="bold">Alert for monitoring thyroid function when taking Amiodarone stopped
          working</emphasis>
        <itemizedlist>
          <listitem>
            <para>Amiodarone is associated with several side effects, including thyroid dysfunction,
              which is due to amiodarone's high iodine content and its direct toxic effect on the
              thyroid</para>
          </listitem>
          <listitem>
            <para>Underlying cause: the identifier for the drug amiodarone was changed in another
              system, brittle means for determining equivalence</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <emphasis role="bold">62% of CDS malfunctions were attributable to changes in underlying
          codes or data fields</emphasis>
        <itemizedlist>
          <listitem>
            <para>Change is a constant feature of providing healthcare</para>
          </listitem>
          <listitem>
            <para>Underlying cause: poorly managed change </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Tinkar addresses challenges/problems from these implementation examples:</para>
      </listitem>
    </itemizedlist>
    <informaltable>
      <tgroup cols="2">
        <colspec colnum="1" colname="col1"/>
        <colspec colnum="2" colname="col2"/>
        <tbody>
          <row>
            <entry>
              <itemizedlist>
                <listitem>
                  <emphasis role="bold">Challenge</emphasis>
                </listitem>
              </itemizedlist>
            </entry>
            <entry>
              <itemizedlist>
                <listitem>
                  <emphasis role="bold">Tinkar Solution</emphasis>
                </listitem>
              </itemizedlist>
            </entry>
          </row>
          <row>
            <entry>Brittle terminology integration frequently breaks across systems</entry>
            <entry>
              <para>Standardize (and facilitate sharing) of terminology representation across
                systems</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>Management of change over time</para>
            </entry>
            <entry>Consistent representation and configuration management</entry>
          </row>
          <row>
            <entry>SNOMED CT’s proprietary aspects prevents use as a common format for LOINC and
              similar</entry>
            <entry>Build on existing SNOMED CT foundation, rather than reinvent, using an opensource
              initiative approved permissive licenses (i.e., Apache 2) </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>
  <section>
    <title>About Tinkar</title>
    <para>Tinkar provides the foundation of a knowledge architecture that is intended to integrate
      reference terminology from distributors (e.g. SNOMED CT, LOINC, RxNorm) with local concepts in
      order to support interoperable information semantics across the enterprise.</para>
    <para>This specification introduces an agile approach to terminology design and formatting that
      promotes the use of self-describing data. It is a shift from hard-coded models that have been
      favored due to their prescriptive nature but have shown limited flexibility and extensibility.
      Like FHIR, this specification places the focus on a self-describing, extensible approach to
      representing terminology. Therefore, Tinkar aims to be both self-describing and completely
      machine processed:</para>
    <orderedlist>
      <listitem>
        <para>Self-describing in a machine-readable representation of terminology such that if an
          application can process the metadata, it should be able to import the content/concepts and
          present make it available to enterprise applications.</para>
      </listitem>
      <listitem>
        <para>The machine-readable terminology could to generate human-readable documentation, so
          that business analysts, developers can understand and apply it correctly.</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Tinkar Objectives and Purpose – Manage Terminology and Change Better</title>
    <para>This specification is describing the requirements and characteristics of systems required
      to manage terminology produced by a variety of organizations across a healthcare enterprise.
      This foundation must allow enterprise to extend terminology standards and implement extensions
      in a timely fashion.</para>
    <para>This specification is intended to support healthcare organizations standard terminology
      modules, value sets, and coding systems as well as local terms and equivalence
      mappings.</para>
    <para>A standard-based Terminology Knowledge Architecture (Tinkar) specification would be
      necessary to support the operation of a variety of systems intended to deliver knowledge
      management for terminology to vendors, providers, and even standards-development organizations
      like HL7. </para>
  </section>
  <section>
    <title>Related Efforts</title>
    <para>Previous efforts have attempted to create a common set of terminology capabilities and
      services by specifying a single pre-defined structure for managing terminology. Unfortunately,
      a hardwired structure that works for one standard may not work for another. The ability of to
      integrate content across terminology standards is a barrier to implementing services and
      modules that can deliver integrated concepts, code lists, and value sets required by
      enterprise systems for treatment, research, business process automation, quality measures, and
      outcome analysis. </para>
    <itemizedlist>
      <listitem>
        <para>Clinical applications require integrated terminology to create interoperable clinical
          statements organized into messages, documents, or resources.</para>
      </listitem>
      <listitem>
        <para>Data analysis and research require integrated terminology to analyze aggregated
          information. Interoperability, clinical decision support, or other types of automation
          require common semantics based on a set of integrated models across reference standards
          (e.g. SNOMED CT, LOINC, RxNorm, etc)</para>
      </listitem>
    </itemizedlist>
    <para>Tinkar is intended to provide an architecture that delivers integrated terminology to the
      enterprise and its information systems, that addresses the differences in management and
      structure across reference terminology and with local concepts and code lists/value sets. </para>
    <para>The UMLS is a compilation of multiple sources organized into ‘concepts’ that contain terms
      from multiple sources. The terms within a concept are declared synonyms by UMLS editors.
      However, its use in terminology systems has limited utility for several reasons. First, UMLS
      concepts are created on lexically-based rules and uses very little of the additional
      information (relationships between concepts) that may be available from the source
      terminology. It does not permit classification to identify cases of possible missed synonymy.
      Secondly, issues of currency occur because of dysynchrony of release dates between source
      terminologies and the UMLS itself. And finally, though there are editing guidelines in place,
      there may be substantial variation in editing practices between the individual editors. UMLS
      is not an architecture for terminology management, it may only serve as a reference, within
      the aforementioned parameters.</para>
    <para>CTS2 is an architecture for terminology management that supports history retrieval, though
      it does not support an arbitrarily granular change set model for versioning. The Tinkar
      Specification, in contrast, provides that every new assertion, whether a new component or a
      change to an existing component, must have a STAMP. CTS2 asserts a specific terminology model,
      and does not support unanticipated properties with a self-describing model.</para>
  </section>
  <section>
    <title>Benefits of Self-Describing Architecture</title>
    <para>Tinkar aims to be both self-describing and completely machine processed. Key advantages of
      a self-describing architecture (or metadata driven architecture) include the following details
        (<link xlink:href="https://www.claysys.com/blog/metadata-driven-application-development/"/>
      – REF): </para>
    <para><emphasis role="bold">Changes can be reviewed immediately</emphasis> – every action or
      change by end users can be immediately previewed or tested, without needing any compilation or
      deployment process. And the review can also be done before saving or publishing the changes,
      which makes it an interactive development environment, for designers to create functionality
      in an iterative manner.</para>
    <para><emphasis role="bold">Version Control with easy rollback</emphasis> - Since every
      published artifact for the web application being designed in a metadata file, every time any
      changes are made, the historic versions of the metadata files are maintained. This enables
      easy version control and rollback when necessary. What this mean is that every time a change
      is made to a Form or any artifact of an application, the prior version that existed is
      archived. So as and when you need to rollback to the prior version, it can be achieved through
      a single click of a button.</para>
    <para><emphasis role="bold">Any data source can be added </emphasis>– A self-describing
      architecture facilitates the ability for multiple types of terminology data sources to be
      connected to the system.</para>
    <para><emphasis role="bold">Define granular coordinates and configuration management</emphasis>
      – The functionality for defining granular user defined settings and controls for granular
      elements of clinical terminology management are supported. This includes
      Create/Read/Update/Delete (CRUD) settings, as well as management of individual elements like
      fields or other controls. </para>
    <para><emphasis role="bold">Faster extensions and updates – </emphasis>A benefit of a
      self-describing architecture is that it can abstract away a lot of the deep internal plumbing
      complexities that makes development of standard terminologies complicated. This approach can
      improve processes around updates to terminology. </para>
  </section>
  <section>
    <title>Approach - Architectural Separation of Concerns</title>
    <para>Increased reliance on computerized health records, including Electronic Health Records
      Systems, requires standardized medical terminology to encode health information consistently
      across systems and enterprises. Clinicians require not only objective quantitative
      measurements (e.g. 90 beats per minute for a patient's pulse) but also contextual or
      procedural context (e.g. pulse oximetry, manual) about past observations or requests for
      future interventions. While two quantitative measurements may be the same, the procedural
      information could indicate meaningful semantic differences and lead to different clinical
      interpretation and treatment. As information is exchanged across systems, the solution
      requires a common understanding of data and a method to support knowledge-representation and
      clinical decision rules based on common terminology and statements. Each component must
      address an aspect and, together they need to address the requirements of clinicians. Current
      HL7 standard implementations rely on profiles and templates to disambiguate statement and
      terminology, and provide sufficient precision for transactions, documents, and standards-based
      APIs. Therefore the architectural approach described here would be applicable to standards
      organizations developing interoperability-enterprise, and project-specific implementations in
      equal measure. </para>
    <para>Functional decomposition—often referred to as a <glossterm
        baseform="Separation of Concerns">Separation of Concerns</glossterm> (SoC)—across components
      or sections with a specific purpose is a foundational design principle for complex system
      architecture. Enabling a SoC allows a complete system to be subdivided into distinct sections
      or components with well-defined functionality and dependencies. If successful, this approach
      allows individual sections to be able to be <emphasis>reused</emphasis>, as well as designed,
      implemented, and updated <emphasis>independently</emphasis> to address emerging
        <emphasis>requirements</emphasis>. This is especially useful and important in a medical
      context given how many different health information and clinical terminology projects are
      ongoing at any given time. Efforts are often uncoordinated and led by disparate and unrelated
      standards development organizations. In these cases, SoC allows teams to work independently,
      in coordination with each other, and reuse the resulting artifacts.</para>
    <figure>
      <title>Separation of Concerns: Knowledge Architecture</title>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata fileref="SoC_new.png" scale="40" align="center"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <caption>
        <para><emphasis>Separation of concerns is an architectural design principle, whereby a
            system is divided into distinct sections, such that each section can address separate
            concerns. In this case, each architectural layer may build upon artifacts from lower
            layers.</emphasis></para>
      </caption>
    </figure>
    <para><emphasis role="bold">Foundational Architecture</emphasis> – The Foundational Architecture
      of the Knowledge Architecture provides the common elements of interoperability such as object
      identity, versioning, modularity, and knowledge representation. It includes a) the foundation
      and building blocks of the common model; (b) how the repeatable transformation process of
      disparate standards into the common model promotes interoperability with other environments;
      and (c) how the modules of the architecture are tightly version controlled over time.</para>
    <para> Terminology Knowledge - The Terminology Knowledge layer is responsible for structured
      sets of medical terms and codes that <emphasis>define</emphasis> concepts of interest,
      including descriptions, dialects, language, and semantic hierarchy. SNOMED CT, LOINC, and
      RxNorm are part of this layer. It defines what valid codes or expressions may be used by
      higher level layers </para>
    <para><emphasis role="bold">Statement Model</emphasis> – The Statement Model layer is
      responsible for defining how data elements are combined to create a statement. ANF Reference
      Model belongs in this layer. Other standards-based clinical statements are discussed later in
      this chapter. This layer reuses the artifacts defined in the Terminology Knowledge
      layer.</para>
    <para><emphasis role="bold">Assertional Knowledge</emphasis> – The Assertional Knowledge layer
      makes use of the Terminology Knowledge layer concepts to specify
        <emphasis>non-defining</emphasis> facts that may be used by procedural knowledge algorithms.
      An example of such a fact might be that "thiazide diuretics treat hypertension." Assertional
      Knowledge may indicate what symptoms may be associated with a disorder. </para>
    <para>
      <emphasis role="bold">Procedural Knowledge</emphasis> – Procedural knowledge, also known as
      imperative knowledge, is the knowledge exercised in the performance of some task, such as
      determining a hypertension treatment plan by analyzing a combination of a patient's ANF
      statements, and the available assertional knowledge. The procedural knowledge is responsible
      for information about standard ways to carry out specific procedures as well as other
      procedural guidelines, e.g. treatment protocols for diseases and order sets focused on
      particular patient situations. Procedural knowledge, together with assertional knowledge,
      enables clinical decision support, quality measurement, and supports patient safety. This
      layer relies on the architectural foundation and terminology layers, incorporates the
      statement model for information retrieval, and uses the assertional knowledge. Procedural
      knowledge artifacts may include clinical alert rules, reminders, etc. that trigger actions or
      recommend interventions.</para>
    <para>Examining a clinical procedure for controlling hypertension illustrates each of the layers
      of the informatics architectural separation of concerns. <itemizedlist>
        <listitem>
          <para>At the Terminology Knowledge layer, there may be various codes and terms from
            disparate source terminologies to define a concept (e.g. hypertension). Ideally, these
            overlapping codes and terms would be oriented to the same parent concept during the
            transformation and integration process at the Foundational Architecture layer (e.g.,
              <glossterm>Solor</glossterm>).</para>
        </listitem>
        <listitem>
          <para>The Statement Model layer enables representation of blood pressure measurement
            values (e.g., systolic BP = 140 mmHg) or the categorical data (e.g., pregnancy induced
            hypertension vs. renal hypertension) within a standard data structure to facilitate
            information exchange or retrieval, such as within a standards-based clinical statement
            (i.e. CIMI, CDA, FHIR, ANF, etc.). </para>
        </listitem>
        <listitem>
          <para> The Assertional Knowledge layer represents non-procedural statements, or facts,
            such as "Stage 2 high blood pressure is over 140 systolic or 90 diastolic," or that
            beta-blockers and ACE inhibitors may be used to treat hypertension, or that
            beta-blockers are contraindicated in patients with a diagnosis of reactive airway
            disease. </para>
        </listitem>
        <listitem>
          <para> Finally, the Procedural Knowledge layer provides algorithms to analyze ANF
            statements about a patient, in combination with the Assertional Knowledge, to recommend
            a treatment protocol for different kinds of hypertension, including the considerations
            of, e.g. patient age, co-morbidities etc., which can be generated by an electronic
            clinical decision support system (Statement + Assertional layers). This layer adds
            support for workflow and conditional logic (i.e. if-then-else).</para>
        </listitem>
      </itemizedlist></para>
    <para>A clear separation of concerns enables the isosemantic transformation of standards-based
      clinical statements to normal form in the Statement Model layer by decoupling structure from
      semantics and workflow.</para>
    <para>HL7 relies on implementation guides (for V2, CDA, and FHIR) to add sufficient terminology
      knowledge to standards-based clinical statements. Vocabulary constraints documented as
      profiles or templates are the mechanism to create interoperable implementation guides from
      health IT standards. Only after the Terminology Knowledge is fully defined, the
      standards-based statements can be used to support business and workflow decision points
      consistent with the Assertional and Procedural layers described above. </para>
  </section>
  <section>
    <title>About this Document</title>
    <para>This document describes how encoded clinical data can be improved with a terminology
      management model. This terminology can be unified for HL7 and non-HL7 systems. The Terminology
      Knowledge Architecture known as Tinkar treats terminology in a common way for managing
      enhanced patient care and improved record keeping. The unification of models such as SNOMED,
      LOINC, and RxNorm will allow more robust computable medical records. The following sections
      contain the TINKAR Reference Model, along with illustrative examples as to the complexity and
      necessity of type of structure. </para>
    <para>The following chapters enumerate the business requirements for Tinkar followed by chapters
      containing the TInkar Reference Model and examples of terminology content. Subsequently,
      Tinkar is compared to other models. Finally, we discuss implications of Tinkar on data
      quality, clinical decision support and patient safely and outcomes.</para>
    <para>Tinkar will take different language sources and cohesively manage terminology data.
      Section 2 lays out the specific business requirements necessary for this task. The model
      representation is outlined in Section 3. Tinkar also brings together the biomedical
      terminologies by a common description format (Section 4). Tinkar is used to fill the gaps
      between the common HL7 Terminologies and outliers like SNOMED, RxNORM, UCUM, etc. The result
      is the distribution and sharing of cohesive data across all platforms. </para>
  </section>
</chapter>
